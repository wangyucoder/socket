/*************************************************************************
	> File Name: tcp_server.c
	> Author: One piece
	> Mail: wangyucoder@foxmail.com
	> Created Time: Sat 29 Jul 2017 08:02:47 PM PDT
 ************************************************************************/

#include<stdio.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<stdlib.h>
#include<errno.h>
#include<string.h>
#include<pthread.h>

//multipthread
void* request(void* argc)
{
    //server : read&write
    int new_sock = (int)argc;
    char buf[1024];
    while(1)
    {
        ssize_t s = read(new_sock,buf,sizeof(buf)-1);
        if(s>0)
        {
            buf[s] = 0;
            printf("Client # %s\n",buf);
            write(new_sock,buf,strlen(buf));
        }else if(s==0){
        printf("client is quit\n");
        }else{
            perror("read");
        }
    }
    close(new_sock);
}
int main(int argc,char* argv[])
{
    if(argc!=3)
    {
        printf("Usage:%s [server ip] [server port]\n",argv[0]);
        return 1;
    }

    int sock = socket(AF_INET,SOCK_STREAM,0);
    //create ipv4 socket
    struct sockaddr_in server_socket;
    struct sockaddr_in client_socket;

    bzero(&server_socket,sizeof(server_socket));
    //fill addr port

    server_socket.sin_family = AF_INET;
    server_socket.sin_addr.s_addr = inet_addr(argv[1]);
    server_socket.sin_port = htons(atoi(argv[2]));

    if(bind(sock,(struct sockaddr*)&server_socket,sizeof(struct sockaddr_in))<0)
    {
        perror("bind");
        close(sock);
        return 1;
    }

    if(listen(sock,10)<0)
    {
        printf("listen error,error code is %d,error string is %s\n",errno,strerror(errno));
        close(sock);
        return 2;
    }

    printf("bind and listen success,wait accept..\n");

    while(1)
    {
        socklen_t len = sizeof(client_socket);

        int new_sock = accept(sock,(struct sockaddr*)&client_socket,&len);
        if(new_sock<0)
        {
       perror("accept..");
            continue;
        }

        printf("get new client![%s:%d]\n",inet_ntoa(client_socket.sin_addr),ntohs(client_socket.sin_port));

        pthread_t pid;
        pthread_create(&pid,NULL,request,(void*)new_sock);

        pthread_detach(pid);
    }
    close(sock);
     return 0;
}
//int main(int argc,char* argv[])
//{
//if(argc!=3)
//{
//printf("Usage: %s [server ip] [server port]\n",arg[0]);
//return 1;
//}
//
//int sock = socket(AF_INET,SOCK_STREAM,0);
//
//struct sockadd_in server_socket;
//struct sockadd_in client_socket;
//
//bzero(&server_socket,sizeof(server_socket));
//
//server_socket.sin_family = AF_INET;
//server_socket.sin_addr.s_addr = inet_addr(argv[1]);
//server_socket.sin_port = htons(atoi(argv[2]));
//
//if(bind(sock,(struct sockadd*)&client_socket,sizeof(struct sockadd_in))<0)
//{
//perror("bind");
//close(sock);
//return 1;
//}
//if(listen(sock,10)<0)
//{
//printf("listen error,error code is %d ,error string is %s\n",errno,strerror(errno));
//close(sock);
//return 2;
//}
//printf("bind and listen success,wait accept ...\n");
//for(;;)
//{
//socklen_t len = sizeof(client_socket);
//int client_sock = accept(sock,(struct soackaddr*)&client_socket,&len);
//if(client_sock<0)
//{
//perror("accept");
//continue;
//.....
//}
//
//
//}
//return 0;
//}
//

/*************************************************************************
	> File Name: tcp_client.c
	> Author:Onc piece 
	> Mail: wangyucoder@foxmail.com
	> Created Time: Sat 29 Jul 2017 11:06:27 PM PDT
 ************************************************************************/

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<error.h>
#include<string.h>
#include<bits/socket.h>

void usage(char* proc)
{
    printf("Usage: %s[server ip] [server port]\n",proc);
}

int main(int argc,char* argv[])
{
    if(argc!=3)
    {
        usage(argv[0]);
        return 1;
    }

    int sock = socket(AF_INET,SOCK_STREAM,0);
    if(sock<0)
    {
        perror("sock");
        return 2;
    }

    //client don't bind
    struct sockaddr_in  peer;
    peer.sin_family = AF_INET;
    peer.sin_port = htons(atoi(argv[2]));
    peer.sin_addr.s_addr = inet_addr(argv[1]);

    if(connect(sock,(struct sockaddr*)&peer,sizeof(peer))<0)
    {
        perror("connect");
        return 3;
    }

    //connect success
    char buf[1024];
    while(1)
    {
        //first write and read
        printf("Please Enter#");
        fflush(stdout);

        ssize_t s = read(0,buf,sizeof(buf)-1);
        if(s>0)
        {
            buf[s-1] = 0;//space and enter should filter
            write(sock,buf,strlen(buf));

            ssize_t s1 = read(sock,buf,sizeof(buf)-1);
            if(s1>0)
            {
            buf[s1] = 0;
            printf("server echo # %s\n",buf);
            }

         }

     }
    close(sock);
    return 0;
}



