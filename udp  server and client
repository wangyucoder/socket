/*************************************************************************
	> File Name: udo_local.c
	> Author: One piece
	> Mail: wangyucoder@foxmail.com
	> Created Time: Sun 30 Jul 2017 06:13:56 PM PDT
 ************************************************************************/

#include<stdio.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<string.h>

static void usage(const char* proc)
{
    printf("usage:%s [local ip][local port]\n",proc);
}

int main(int argc,char* argv[])
{
    if(argc !=3)
    {
        usage(argv[0]);
        return 1;
    }

    int sock = socket(AF_INET,SOCK_DGRAM,0);
    if(sock<0)
    {
        perror("sock");
        return 2;
    }

    struct sockaddr_in local;
    local.sin_family = AF_INET;
    local.sin_addr.s_addr = inet_addr(argv[1]);
    local.sin_port = htons(atoi(argv[2]));

    if(bind(sock,(struct sockaddr*)&local,sizeof(local))<0)
    {
        perror("bind");
        return 3;
    }
    char buf[1024];
    struct sockaddr_in  client_socket;
    while(1)
    {
        socklen_t len =sizeof(client_socket);
        size_t s = recvfrom(sock,buf,sizeof(buf)-1,0,(struct sockaddr*)&client_socket,&len);
        if(s>0)
        {
            buf[s] = 0;
            printf("[%s][%d]:%s\n",inet_ntoa(client_socket.sin_addr),ntohs(client_socket.sin_port),buf);
            
            //write
            ssize_t s1 = sendto(sock,buf,strlen(buf),0,(struct sockaddr*)&client_socket,sizeof(client_socket));

            if(s1<0)
            {
                perror("sendto");
                return 4;
            }
        }

    }
    return 0;
}

//udp_client.c
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<sys/types.h>

static void usage(const char* proc)
{
    printf("usage:%s [server ip] [local port]\n",proc);
}

int main(int argc,char* argv[])
{
    if(argc!=3)
    {
        usage(argv[0]);
        return 1;
    }

    int sock = socket(AF_INET,SOCK_DGRAM,0);
    if(sock<0)
    {
        perror("sock");
        return 2;
    }
    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(argv[1]);
    server.sin_port = htons(atoi(argv[2]));

    char buf[1024];
    while(1)
    {
        printf("Please Enter:");
        fflush(stdout);
        ssize_t s = read(0,buf,sizeof(buf)-1);
        if(s>0)
        {
            buf[s] = 0;
            ssize_t s1 = sendto(sock,buf,strlen(buf),0,(struct sockaddr*)&server,sizeof(server));
            if(s1<0)
            {
                perror("sendto");
                return 3;
            }
         s = recvfrom(sock,buf,sizeof(buf)-1,0,0,0);
            if(s>0)
            {
                buf[s] = 0;
                printf("server echo:%s\n",buf);
            }
        }
    }
    return 0;
}
