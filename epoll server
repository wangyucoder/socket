/*************************************************************************
	> File Name: epoll.c
	> Author:One piece 
	> Mail: wangyucoder@foxmail.com
	> Created Time: Mon 31 Jul 2017 01:32:14 AM PDT
 ************************************************************************/

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<sys/epoll.h>
#include<string.h>
#include<unistd.h>

#define SIZE 64
const char* msg = "HTTP/1.0 200 OK\r\n\r\n<html><hl>see you again!</h1></html>\r\n";

static void usage(const char* proc)
{
    printf("usage : %s [local ip][loca port]\n",proc);
}

int startup(const char* ip,int port)
{
    int sock = socket(AF_INET,SOCK_STREAM,0);
    if(sock < 0)
    {
        perror("socket");
        exit(1);
    }
    
    //当服务器遗产关闭时清除套结字，就可再次重启
    int opt =  1;
    setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(int));

    struct sockaddr_in local;
    local.sin_family = AF_INET;
    local.sin_addr.s_addr = inet_addr(ip);
    local.sin_port = htons(port);

    if(bind(sock,(struct sockaddr*)&local,sizeof(local))<0)
    {
        perror("bind");
        exit(2);
    }

    if(listen(sock,10)<0)
    {
        perror("listen");
        exit(3);
    }

    return sock;

}

int main(int argc,char* argv[])
{
    if(argc!=3)
    {
        usage(argv[0]);
        return 4;
    }

    int listen_sock = startup(argv[1],atoi(argv[2]));

    //创建epoll模型文件描述符数组，随机给值
    int epfd = epoll_create(256);
    if(epfd<0)
    {
        perror("epoll_create");
        return 5;
    }
    //打印监听套结字
    printf("listen_sock:%d\n",listen_sock);

    //设置epoll模型结构体，存放文件描述符 和 事件
    struct epoll_event ev;
    ev.events = EPOLLIN;
    ev.data.fd = listen_sock;

    //将监听套结字加入epoll模型中的文件描述符数组
    epoll_ctl(epfd,EPOLL_CTL_ADD,listen_sock,&ev);

    int nums = -1;
    int timeout = 1000;
    
    struct epoll_event revs[SIZE];

    //处理就绪队列里的文件描述符和事件
    while(1)
    {
        switch((nums = epoll_wait(epfd,revs,SIZE,timeout)))
        {
         case 0:
            printf("time out...\n");
         case -1:
            perror("epoll_wait");
            break;
         default:
            {
                int i = 0;
                for(i= 0; i<nums; i++)
                {
                    int fd = revs[i].data.fd;
                    //检测是否是监听套结字，并确定是读事件
                    if(listen_sock == fd && (revs[i].events&EPOLLIN))
                    {//listen_sock ready!
                     struct sockaddr_in client;
                     socklen_t len = sizeof(client);

                     int rw_sock = accept(listen_sock,(struct sockaddr*)&client,&len);

                     if(rw_sock<0)
                     {
                         perror("accept");
                         continue;
                     }
                     printf("get a new client! : [%s:%d]\n",inet_ntoa(client.sin_addr),ntohs(client.sin_port));

                     ev.events = EPOLLIN;
                     ev.data.fd = rw_sock;

                     epoll_ctl(epfd,EPOLL_CTL_ADD,rw_sock,&ev);
                    }else if(fd!=listen_sock){
                     if(revs[i].events&EPOLLIN)
                        {
                            char buf[1024];
                            ssize_t s = read(fd,buf,sizeof(buf)-1);
                            if(s>0)
                            {
                                buf[s] = 0;
                                printf("client say# %s\n",buf);

                                //重置事件为写事件
                                ev.events = EPOLLOUT;
                                ev.data.fd = fd;
                                epoll_ctl(epfd,EPOLL_CTL_MOD,fd,&ev);
                            }else if(s==0){//读完了
                                printf("client is quit!\n");
                                epoll_ctl(epfd,EPOLL_CTL_DEL,fd,NULL);
                                close(fd);
                                          }else{
                                              perror("read");
                                              epoll_ctl(epfd,EPOLL_CTL_DEL,fd,NULL);
                                              close(fd);
                                          }
                        }else if(revs[i].events&EPOLLOUT){//有数据要写
                            write(fd,msg,strlen(msg));
                            epoll_ctl(epfd,EPOLL_CTL_DEL,fd,NULL);
                            close(fd);
                        }else{}
                    }
                }
            }
        }
    }
    return 0;
}
